// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PublishingHouse.DAL.Migrations
{
    [DbContext(typeof(PublishingHouseDbContext))]
    [Migration("20241117002246_RolesAdded")]
    partial class RolesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PublishingHouse.DAL.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("department");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AdminId")
                        .HasName("PK__Admin__43AA4141C7877CB0");

                    b.HasIndex(new[] { "UserId" }, "UQ__Admin__B9BE370E40F23370")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("AuthorId")
                        .HasName("PK__Author__86516BCFAB446216");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.BatchPrint", b =>
                {
                    b.Property<int>("BatchPrintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("batch_print_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchPrintId"));

                    b.Property<int>("BookQuantity")
                        .HasColumnType("int")
                        .HasColumnName("book_quantity");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("number");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateOnly?>("PrintDate")
                        .HasColumnType("date")
                        .HasColumnName("print_date");

                    b.Property<int>("QualityMarkId")
                        .HasColumnType("int")
                        .HasColumnName("quality_mark_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("BatchPrintId")
                        .HasName("PK__BatchPri__131B3A7E22864534");

                    b.HasIndex("OrderId");

                    b.HasIndex("QualityMarkId");

                    b.HasIndex(new[] { "Number" }, "UQ__BatchPri__FD291E41B1E14406")
                        .IsUnique();

                    b.ToTable("BatchPrint", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Annotation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("annotation");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("isbn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Pages")
                        .HasColumnType("int")
                        .HasColumnName("pages");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int")
                        .HasColumnName("publication_year");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("size");

                    b.Property<int?>("Sku")
                        .HasColumnType("int")
                        .HasColumnName("sku");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("BookId")
                        .HasName("PK__Book__490D1AE11E94B7E0");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex(new[] { "Isbn" }, "UQ__Book__99F9D0A4745D556C")
                        .IsUnique()
                        .HasFilter("[isbn] IS NOT NULL");

                    b.HasIndex(new[] { "Sku" }, "UQ__Book__DDDF4BE78D032874")
                        .IsUnique()
                        .HasFilter("[sku] IS NOT NULL");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("CityId")
                        .HasName("PK__City__031491A848DF29EC");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "Name" }, "UQ__City__72E12F1B0C612C9A")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateOnly?>("AddressDate")
                        .HasColumnType("date")
                        .HasColumnName("address_date");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("customer_type_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__CD65CB850C221190");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__AB6E6164FBEB906C")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("customer_type_id");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("CustomerTypeId")
                        .HasName("PK__Customer__3320C939AD7E17BD");

                    b.HasIndex(new[] { "Name" }, "UQ__Customer__72E12F1B59917A9E")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("CustomerType", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnName("production_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C52E0BA82065EEAB");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProductionId");

                    b.HasIndex(new[] { "UserId" }, "UQ__Employee__B9BE370E4E2C7666")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("GenreId")
                        .HasName("PK__Genre__18428D42C6B052A9");

                    b.HasIndex(new[] { "Name" }, "UQ__Genre__72E12F1B840B315C")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.OrderBook", b =>
                {
                    b.Property<int>("OrderBooksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_books_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderBooksId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("BookQuantity")
                        .HasColumnType("int")
                        .HasColumnName("book_quantity");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("OrderBooksId")
                        .HasName("PK__OrderBoo__6F7F4BB716436A2F");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderBooks");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("OrderStatusId")
                        .HasName("PK__OrderSta__A499CF2325C121F2");

                    b.HasIndex(new[] { "Name" }, "UQ__OrderSta__72E12F1BA2D4DCAB")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("PositionId")
                        .HasName("PK__Position__99A0E7A421BDE14B");

                    b.HasIndex(new[] { "Name" }, "UQ__Position__72E12F1B62DE1B97")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.PrintOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<string>("CoverType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cover_type");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("FasteningType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fastening_type");

                    b.Property<bool>("IsLaminated")
                        .HasColumnType("bit")
                        .HasColumnName("is_laminated");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<string>("PaperType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("paper_type");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("PrintType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("print_type");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("OrderId")
                        .HasName("PK__PrintOrd__46596229906EE16E");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex(new[] { "Number" }, "UQ__PrintOrd__FD291E41EC5F3387")
                        .IsUnique();

                    b.ToTable("PrintOrder", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Production", b =>
                {
                    b.Property<int>("ProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("production_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("production_type_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ProductionId")
                        .HasName("PK__Producti__60F4D65C9377E19B");

                    b.HasIndex("CityId");

                    b.HasIndex("ProductionTypeId");

                    b.ToTable("Production", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.ProductionType", b =>
                {
                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("production_type_id");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ProductionTypeId")
                        .HasName("PK__Producti__27977FA8C05506DA");

                    b.HasIndex(new[] { "Name" }, "UQ__Producti__72E12F1B949AE5C2")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("ProductionType", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.QualityMark", b =>
                {
                    b.Property<int>("QualityMarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quality_mark_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualityMarkId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("QualityMarkId")
                        .HasName("PK__QualityM__F1D96A9EC050D447");

                    b.HasIndex(new[] { "Name" }, "UQ__QualityM__72E12F1B83341E29")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("QualityMark", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("RegionId")
                        .HasName("PK__Region__01146BAE16614F6D");

                    b.HasIndex(new[] { "Name" }, "UQ__Region__72E12F1BB9D45034")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__760965CC471A52B9");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__72E12F1BA687F40B")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("phone_number");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370FF5F697EA");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__User__A1936A6B6A7DAA1B")
                        .IsUnique()
                        .HasFilter("[phone_number] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E61645418BFCE")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__User__F3DBC5723FCF9A25")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Admin", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("PublishingHouse.DAL.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Admin__user_id__634EBE90");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.BatchPrint", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.PrintOrder", "Order")
                        .WithMany("BatchPrints")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__BatchPrin__updat__01D345B0");

                    b.HasOne("PublishingHouse.DAL.Models.QualityMark", "QualityMark")
                        .WithMany("BatchPrints")
                        .HasForeignKey("QualityMarkId")
                        .IsRequired()
                        .HasConstraintName("FK__BatchPrin__quali__02C769E9");

                    b.Navigation("Order");

                    b.Navigation("QualityMark");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Book", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__Book__update_dat__6BE40491");

                    b.HasOne("PublishingHouse.DAL.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__Book__genre_id__6CD828CA");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.City", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK__City__update_dat__531856C7");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Customer", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__update__72910220");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Employee", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK__Employee__update__5CA1C101");

                    b.HasOne("PublishingHouse.DAL.Models.Production", "Production")
                        .WithMany("Employees")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee__produc__5D95E53A");

                    b.HasOne("PublishingHouse.DAL.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("PublishingHouse.DAL.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee__user_i__5E8A0973");

                    b.Navigation("Position");

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.OrderBook", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.Book", "Book")
                        .WithMany("OrderBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderBook__book___0880433F");

                    b.HasOne("PublishingHouse.DAL.Models.PrintOrder", "Order")
                        .WithMany("OrderBooks")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderBook__updat__078C1F06");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.PrintOrder", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.Customer", "Customer")
                        .WithMany("PrintOrders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__PrintOrde__custo__7A3223E8");

                    b.HasOne("PublishingHouse.DAL.Models.Employee", "Employee")
                        .WithMany("PrintOrders")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__PrintOrde__emplo__7B264821");

                    b.HasOne("PublishingHouse.DAL.Models.OrderStatus", "OrderStatus")
                        .WithMany("PrintOrders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__PrintOrde__updat__793DFFAF");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Production", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.City", "City")
                        .WithMany("Productions")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__Productio__city___57DD0BE4");

                    b.HasOne("PublishingHouse.DAL.Models.ProductionType", "ProductionType")
                        .WithMany("Productions")
                        .HasForeignKey("ProductionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Productio__updat__56E8E7AB");

                    b.Navigation("City");

                    b.Navigation("ProductionType");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.User", b =>
                {
                    b.HasOne("PublishingHouse.DAL.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__update_dat__30C33EC3");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Book", b =>
                {
                    b.Navigation("OrderBooks");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.City", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Customer", b =>
                {
                    b.Navigation("PrintOrders");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Employee", b =>
                {
                    b.Navigation("PrintOrders");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.OrderStatus", b =>
                {
                    b.Navigation("PrintOrders");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.PrintOrder", b =>
                {
                    b.Navigation("BatchPrints");

                    b.Navigation("OrderBooks");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Production", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.ProductionType", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.QualityMark", b =>
                {
                    b.Navigation("BatchPrints");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PublishingHouse.DAL.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
